#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jul 11 13:37:27 2019

@author: robertmckenzie

This script contains the code required to analyze and generate statistics for
images so that they can be recognized.
"""

from PIL import Image
import statistics

"""
Standard width, height: engine increases accuracy by resizing each image to
these dimensions before analysis.

Specificity: Approximately specificity ^ 2 "reference points" will be gathered
from the engine and stored. A higher specificity increases reliability, but also
storage and performance costs. I have not yet looked for the "optimal" specificity,
but I do not believe it can be much higher than 20-30.
"""
standardw = 1000
standardh = 1000
specificity = 20


"""
takes a pixel map generated by calling Image.load() and returns the mean of
all pixel values in the vicinity of that pixel. Used to help account for
compression/resizing in image recognition.

pxmap: array of pixels that can be easily read. Create one by calling Image.load().
x,y: coordinates of pixel to be analyzed.
xsize, ysize: image resolution needs to be passed to the function, for the moment.
strength: size of the region to be searched to find the mean. Roughly strength ^ 2 
  pixels will be searched.

"""
def mean_at_pixel(pxmap, x, y, xsize, ysize, strength):
    
    """
    This part ensures the script doesn't try to access a location that's
    out of bounds. It's unneccesary for this project due to the samping
    margins used in getimagestatistics(), but it's here for robustness' sake.
    """
    lowestX = int(x - strength / 2)
    highestX = int(x + strength / 2)
    lowestY = int(y - strength / 2)
    highestY = int(y + strength / 2)
    if lowestX < 0:
        lowestX = 0
    if highestX > xsize:
        highestX = xsize
    if lowestY < 0:
        lowestY = 0
    if highestY > ysize:
        highestY = ysize
    
    r_avg = 0
    g_avg = 0
    b_avg = 0
    
    denominator = (highestX - lowestX) * (highestY - lowestY)
    
    for cx in range(lowestX, highestX):
        for cy in range(lowestY, highestY):
            r_avg += pxmap[cx,cy][0] / denominator
            g_avg += pxmap[cx,cy][1] / denominator
            b_avg += pxmap[cx,cy][2] / denominator
    
    resR = int(r_avg)
    resG = int(g_avg)
    resB = int(b_avg)
    
    return(resR, resG, resB)
    
"""
Standardizes an image to match standard width and standard height. If an image
is black and white, it's converted to RGB. This avoids Type Errors later on.
"""
def standardize_image(img):
    res = img.resize((standardw, standardh),Image.BICUBIC)
    
    if len(res.getbands()) == 1:
        newIm = Image.new("RGB",(standardw, standardh))
        for cx in range(standardw):
            for cy in range(standardh):
                val = res.getpixel((cx,cy))
                newIm.putpixel((cx, cy), (val, val, val))
        res = newIm
    return res

"""
Returns the mean at pixel for specificity ^ 2 reference points on the image.
"""
def get_image_stats(img):
    img = standardize_image(img)
    pxmap = img.load()
    xsize = img.size[0]
    ysize = img.size[1]
    
    xsamplemargin = int(xsize / specificity)
    ysamplemargin = int(ysize / specificity)
    
    xspacing = int((xsize - (2 * xsamplemargin)) / specificity)
    yspacing = int((ysize - (2 * ysamplemargin)) / specificity)
    
    imgStats = [""]
    
    for cx in range(specificity):
        for cy in range(specificity):
            #I pass xspacing as strength so that each pixel inside the margins
            #is analyzed once.
            mean = mean_at_pixel(pxmap, 
                               xsamplemargin + cx * xspacing,
                               ysamplemargin + cy * yspacing,
                               xsize, ysize, xspacing)
                
            imgStats.append(mean)
            
    return imgStats

"""
Converts statistics generated by getimagestats() into a specially formatted
string form, so that they can be written to a database file.
"""
def stats_to_string(stats):
    res = ""
    for stat in stats:
        try:
            res = res + str(stat[0]) + "," + str(stat[1]) + "," + str(stat[2]) + "%"
        except:
            res = stats[0] + "%"
    return res